{"version":3,"sources":["asset/scg-logo.png","modules/App.tsx","common/components/Header.tsx","common/components/Footer.tsx","common/components/Layout.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","liff","window","App","props","state","displayName","userId","pictureUrl","statusMessage","initialize","bind","closeApp","this","init","a","getProfile","profile","setState","event","preventDefault","sendMessages","type","text","then","closeWindow","Fragment","className","src","alt","JSON","stringify","color","onClick","style","height","React","Component","Header","Navbar","bg","fixed","Brand","href","logo","width","Collapse","Nav","Item","Link","active","Footer","Layout","children","Boolean","location","hostname","match","ReactDOM","render","basename","process","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,sC,+PCIrCC,G,MADSC,OACKD,MACCE,E,YACpB,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACZC,YAAa,GACbC,OAAQ,GACRC,WAAY,GACZC,cAAe,IAEhB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBATE,E,iFAYlBE,KAAKH,e,mCAIQ,IAAD,OACZT,EAAKa,KAAL,sBAAU,4BAAAC,EAAA,sEACWd,EAAKe,aADhB,OACLC,EADK,OAET,EAAKC,SAAS,CACbZ,YAAaW,EAAQX,YACrBC,OAAQU,EAAQV,OAChBC,WAAYS,EAAQT,WACpBC,cAAeQ,EAAQR,gBANf,8C,+BAUFU,GACRA,EAAMC,iBACNnB,EAAKoB,aAAa,CAAC,CAClBC,KAAM,OACNC,KAAM,qBACHC,MAAK,WACRvB,EAAKwB,mB,+BAIN,OACC,kBAAC,IAAMC,SAAP,KACC,4BAAQC,UAAU,cACjB,yBAAKC,IAAKf,KAAKR,MAAMG,WAAYmB,UAAU,WAAWE,IAAI,SAC1D,wBAAIF,UAAU,aAAd,oBACA,uBAAGA,UAAU,aAAb,kBACiBd,KAAKR,MAAMC,YAD5B,IACyC,6BADzC,aAEYO,KAAKR,MAAME,OAFvB,IAE+B,6BAF/B,gBAGeM,KAAKR,MAAMI,cAH1B,sBAKEqB,KAAKC,UAAUlB,KAAKR,QAEtB,4BAAQ2B,MAAM,UAAUC,QAASpB,KAAKD,UAAtC,UAED,yBAAKsB,MAAO,CAAEC,OAAQ,e,GApDOC,IAAMC,W,yCCAlBC,E,iLAEnB,OACC,kBAAC,IAAMZ,SAAP,KACC,kBAACa,EAAA,EAAD,CAAQC,GAAG,OAAOC,MAAM,OACvB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAClB,yBAAKf,IAAKgB,IAAMC,MAAM,WAEvB,kBAACN,EAAA,EAAOO,SAAR,CAAiBnB,UAAU,mBAC1B,kBAACoB,EAAA,EAAD,KACC,kBAACA,EAAA,EAAIC,KAAL,KACC,kBAACD,EAAA,EAAIE,KAAL,CAAUN,KAAK,QAAQO,QAAM,GAA7B,WAED,kBAACH,EAAA,EAAIC,KAAL,KACC,kBAACD,EAAA,EAAIE,KAAL,CAAUN,KAAK,KAAf,SAED,kBAACI,EAAA,EAAIC,KAAL,KACC,kBAACD,EAAA,EAAIE,KAAL,CAAUN,KAAK,MAAf,iB,GAjB4BP,IAAMC,WCHrBc,E,iLAEnB,OACC,kBAAC,IAAMzB,SAAP,KACC,qD,GAJgCU,IAAMC,WCCrBe,E,YACpB,WAAYhD,GAAa,qEAClBA,I,sEAGN,OACC,kBAAC,IAAMsB,SAAP,KACC,kBAAC,EAAD,MACCb,KAAKT,MAAMiD,SACZ,kBAAC,EAAD,W,GATgCjB,IAAMC,W,MCStBiB,QACW,cAA7BpD,OAAOqD,SAASC,UAEe,UAA7BtD,OAAOqD,SAASC,UAEhBtD,OAAOqD,SAASC,SAASC,MACvB,2D,oBCVNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAUC,yBACvB,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7D,MAGrC8D,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.7a1ce65b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scg-logo.23817162.png\";","import React from 'react';\r\nimport logo from '../asset/logo.svg';\r\nimport '../style/App.css';\r\nconst Window = window as any\r\nconst liff = Window.liff\r\nexport default class App extends React.Component<any, any> {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdisplayName: '',\r\n\t\t\tuserId: '',\r\n\t\t\tpictureUrl: '',\r\n\t\t\tstatusMessage: ''\r\n\t\t};\r\n\t\tthis.initialize = this.initialize.bind(this);\r\n\t\tthis.closeApp = this.closeApp.bind(this);\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis.initialize()\r\n\t\t// window.addEventListener('load', this.initialize);\r\n\t}\r\n\r\n\tinitialize() {\r\n\t\tliff.init(async () => {\r\n\t\t\tlet profile = await liff.getProfile();\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplayName: profile.displayName,\r\n\t\t\t\tuserId: profile.userId,\r\n\t\t\t\tpictureUrl: profile.pictureUrl,\r\n\t\t\t\tstatusMessage: profile.statusMessage\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\tcloseApp(event) {\r\n\t\tevent.preventDefault();\r\n\t\tliff.sendMessages([{\r\n\t\t\ttype: 'text',\r\n\t\t\ttext: \"Thank you, Bye!\"\r\n\t\t}]).then(() => {\r\n\t\t\tliff.closeWindow();\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<header className=\"App-header\">\r\n\t\t\t\t\t<img src={this.state.pictureUrl} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t\t<h1 className=\"App-title\">Welcome to React</h1>\r\n\t\t\t\t\t<p className=\"App-intro\">\r\n\t\t\t\t\t\tDisplay Name : {this.state.displayName} <br />\r\n\t\t\t\t\t\tUser ID : {this.state.userId} <br />\r\n\t\t\t\t\t\tStatus Msg : {this.state.statusMessage}\r\n\t\t\t\t\t\t================>>>\r\n\t\t\t\t\t\t{JSON.stringify(this.state)}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<button color=\"primary\" onClick={this.closeApp}>Close</button>\r\n\t\t\t\t</header>\r\n\t\t\t\t<div style={{ height: '20px' }} />\r\n\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n","import React from \"react\"\r\nimport '../../style/Header.css'\r\nimport logo from '../../asset/scg-logo.png'\r\nimport { Container, Row, Col, Navbar, Nav } from 'react-bootstrap'\r\n\r\nexport default class Header extends React.Component<any> {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Navbar bg=\"dark\" fixed=\"top\">\r\n\t\t\t\t\t<Navbar.Brand href=\"#home\">\r\n\t\t\t\t\t\t<img src={logo} width=\"100px\" />\r\n\t\t\t\t\t</Navbar.Brand>\r\n\t\t\t\t\t<Navbar.Collapse className='navbar-collapse'>\r\n\t\t\t\t\t\t<Nav>\r\n\t\t\t\t\t\t\t<Nav.Item>\r\n\t\t\t\t\t\t\t\t<Nav.Link href=\"/home\" active>Active</Nav.Link>\r\n\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t\t<Nav.Item>\r\n\t\t\t\t\t\t\t\t<Nav.Link href='/'>Link</Nav.Link>\r\n\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t\t<Nav.Item>\r\n\t\t\t\t\t\t\t\t<Nav.Link href='/g'>Link</Nav.Link>\r\n\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Navbar.Collapse>\r\n\r\n\r\n\t\t\t\t</Navbar>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n}","import React from \"react\";\r\n\r\nexport default class Footer extends React.Component<any> {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<footer>TTTTTTTEEEEE</footer>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n}","import React from \"react\";\r\nimport Header from './Header'\r\nimport Footer from './Footer'\r\nexport default class Layout extends React.Component<any> {\r\n\tconstructor(props: any) {\r\n\t\tsuper(props)\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Header />\r\n\t\t\t\t{this.props.children}\r\n\t\t\t\t<Footer />\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport App from './modules/App';\r\nimport Layout from './common/components/Layout'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Layout>\r\n      <Route exact path=\"/\" component={App} />\r\n    </Layout>\r\n  </BrowserRouter>,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}